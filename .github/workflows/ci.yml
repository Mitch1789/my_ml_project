# .github/workflows/ci.yml
name: ML CI + CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint (flake8)
        run: flake8 . --exclude .venv

      - name: Run Unit Tests (pytest)
        run: pytest --maxfail=1 --disable-warnings -q

      - name: Train model
        run: python train.py

      - name: Check performance
        run: python check_performance.py

      - name: Upload model artifact
        uses: actions/upload-artifact@v4
        with:
          name: model-artifact
          path: artifacts/model.pkl

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: needs.build-and-test.result == 'success'

    steps:
      - name: Download model artifact
        uses: actions/download-artifact@v4
        with:
          name: model-artifact
          path: artifacts/

      - name: Decode SSH key
        run: |
         mkdir -p ~/.ssh
         echo "${{ secrets.STAGING_SSH_KEY_B64 }}" | base64 --decode > ~/.ssh/id_rsa
         chmod 600 ~/.ssh/id_rsa   

      - name: Deploy to Staging via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key_path: ~/.ssh/id_rsa
          port: 22
          source: artifacts/model.pkl
          target: /path/to/staging/models/latest.pkl

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker image
        run: |
          docker build -t myorg/ml-app:${{ github.sha }} .
          docker push myorg/ml-app:${{ github.sha }}
